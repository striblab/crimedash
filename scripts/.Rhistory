axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5))
# Define the file name for the SVG output
svg_file_name <- paste0(crime, "_map_", substr(year, 2, 5), ".svg")
# Save the plot as an SVG
ggsave(svg_file_name, plot = p, width = 10, height = 8, units = "in", device = 'svg')
csvcopy(svg_file_name, crime)
}
}
# Example usage
#generate_svg_maps('')
categories <- c('Murder and Nonnegligent Manslaughter')
rawplot(categories,'murder')
ycatplot(categories,'murder')
mocatplot(categories,'murder')
ytdcatplot(categories,'murder')
precinctcount(categories,'murder')
geocatplot(categories,'murder')
generate_svg_maps('murder')
categories <- c('Negligent Manslaughter')
rawplot(categories,'manslaughter')
ycatplot(categories,'manslaughter')
mocatplot(categories,'manslaughter')
ytdcatplot(categories,'manslaughter')
precinctcount(categories,'manslaughter')
geocatplot(categories,'manslaughter')
generate_svg_maps('manslaughter')
categories <- c('Justifiable Homicide')
rawplot(categories,'justified')
ycatplot(categories,'justified')
mocatplot(categories,'justified')
ytdcatplot(categories,'justified')
precinctcount(categories,'justified')
geocatplot(categories,'justified')
generate_svg_maps('justified')
categories <- c('Aggravated Assault')
rawplot(categories,'assault')
ycatplot(categories,'assault')
mocatplot(categories,'assault')
ytdcatplot(categories,'assault')
precinctcount(categories,'assault')
geocatplot(categories,'assault')
generate_svg_maps('assault')
categories <- c('Domestic Aggravated Assault - Subset of Assault')
rawplot(categories,'domestic')
ycatplot(categories,'domestic')
mocatplot(categories,'domestic')
ytdcatplot(categories,'domestic')
precinctcount(categories,'domestic')
geocatplot(categories,'domestic')
generate_svg_maps('domestic')
categories <- c('Shooting (PFE)',
'Shooting Report Only (P)', 'ShotSpotter Activation (P)',  'Sound of Shots Fired (P)')
rawplot(categories,'gunfire')
ycatplot(categories,'gunfire')
mocatplot(categories,'gunfire')
ytdcatplot(categories,'gunfire')
precinctcount(categories,'gunfire')
geocatplot(categories,'gunfire')
generate_svg_maps('gunfire')
categories <- c('Gunshot Wound Victims')
rawplot(categories,'shotvictims')
ycatplot(categories,'shotvictims')
mocatplot(categories,'shotvictims')
ytdcatplot(categories,'shotvictims')
precinctcount(categories,'shotvictims')
geocatplot(categories,'shotvictims')
generate_svg_maps('shotvictims')
categories <- c('Sex Offenses')
rawplot(categories,'rape')
ycatplot(categories,'rape')
mocatplot(categories,'rape')
ytdcatplot(categories,'rape')
precinctcount(categories,'rape')
geocatplot(categories,'rape')
generate_svg_maps('rape')
categories <- c('Robbery')
rawplot(categories,'robbery')
ycatplot(categories,'robbery')
mocatplot(categories,'robbery')
ytdcatplot(categories,'robbery')
precinctcount(categories,'robbery')
geocatplot(categories,'robbery')
generate_svg_maps('robbery')
categories <- c('Carjacking - Subset of Robbery')
rawplot(categories,'carjack')
ycatplot(categories,'carjack')
mocatplot(categories,'carjack')
ytdcatplot(categories,'carjack')
precinctcount(categories,'carjack')
geocatplot(categories,'carjack')
generate_svg_maps('carjack')
categories <- c('Motor Vehicle Theft')
rawplot(categories,'autotheft')
ycatplot(categories,'autotheft')
mocatplot(categories,'autotheft')
ytdcatplot(categories,'autotheft')
precinctcount(categories,'autotheft')
geocatplot(categories,'autotheft')
generate_svg_maps('autotheft')
categories <- c('All Other Larceny', 'Theft From Motor Vehicle', 'Pocket-picking', 'Purse-snatching', 'Shoplifting', 'Theft From Building', 'Theft From Coin-Operated Machine or Device', 'Theft of Motor Vehicle Parts or Accessories')
rawplot(categories,'larceny')
ycatplot(categories,'larceny')
mocatplot(categories,'larceny')
ytdcatplot(categories,'larceny')
precinctcount(categories,'larceny')
geocatplot(categories,'larceny')
generate_svg_maps('larceny')
categories <- c('Burglary/Breaking & Entering')
rawplot(categories,'burglary')
ycatplot(categories,'burglary')
mocatplot(categories,'burglary')
ytdcatplot(categories,'burglary')
precinctcount(categories,'burglary')
geocatplot(categories,'burglary')
generate_svg_maps('burglary')
categories <- c('Arson')
rawplot(categories,'arson')
ycatplot(categories,'arson')
mocatplot(categories,'arson')
ytdcatplot(categories,'arson')
precinctcount(categories,'arson')
geocatplot(categories,'arson')
generate_svg_maps('arson')
categories <- c('Drug/Narcotic Violations')
rawplot(categories,'drugs')
ycatplot(categories,'drugs')
mocatplot(categories,'drugs')
ytdcatplot(categories,'drugs')
precinctcount(categories,'drugs')
geocatplot(categories,'drugs')
generate_svg_maps('drugs')
categories <- c('Animal Cruelty', 'Pornography/Obscene Material', 'Counterfeiting/Forgery', 'Destruction/Damage/Vandalism of Property', 'Embezzlement', 'Extortion/Blackmail', 'False Pretenses/Swindle/Confidence Game', 'Gambling Equipment Violations', 'Human Trafficking, Commercial Sex Acts', 'Kidnapping/Abduction', 'Prostitution', 'Stolen Property Offenses', 'Weapon Law Violations', 'Hacking/Computer Invasion', 'Human Trafficking, Involuntary Servitude', 'Simple Assault', 'Intimidation')
rawplot(categories,'other')
# Empty JSON folder
# Set the path to the directory
directory_path <- "./json"
files_to_delete <- list.files(directory_path, full.names = TRUE)
deleted_files <- file.remove(files_to_delete)
deleted_files
# Set the path to the directory containing the CSV files
input_folder <- "/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/scripts"
# Set the path to the directory where JSON files will be saved
output_folder <- "/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/scripts/json"
# Create the output folder if it does not exist
if (!dir.exists(output_folder)) {
dir.create(output_folder)
}
# List all CSV files in the input folder
csv_files <- list.files(input_folder, pattern = "\\.csv$", full.names = TRUE)
# Function to convert CSV to JSON
convert_csv_to_json <- function(csv_file) {
# Read the CSV file
data <- read.csv(csv_file)
# Convert the data frame to JSON
json_data <- toJSON(data, pretty = TRUE)
# Construct the output file name
output_file <- file.path(output_folder, gsub("csv$", "json", basename(csv_file)))
# Write the JSON data to a file
write(json_data, file = output_file)
}
# Apply the function to all CSV files
lapply(csv_files, convert_csv_to_json)
destination_dir <- "../src/data"
# List all files in the source directory
files_to_move <- list.files(path = directory_path, full.names = TRUE)
for (file_path in files_to_move) {
file_name <- basename(file_path)
dest_path <- file.path(destination_dir, file_name)
file.copy(from = file_path, to = dest_path, overwrite = TRUE)
# If moving is preferred over copying, delete the original file
if (file.exists(dest_path)) {
file.remove(file_path)
}
}
file_removed <- file.remove("/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/src/data/Crime_Data.json")
cleanup()
# Get the current timestamp
current_timestamp <- Sys.time()
# Convert the timestamp to a string (if you want it in a specific format you can use format())
formatted_timestamp <- as.character(current_timestamp)
# Specify the file path
file_path <- "/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/timestamp.txt"
# Write the timestamp to the file
writeLines(formatted_timestamp, file_path)
# Define the function to download arrest files
download_arrest_reports <- function() {
base_path <- "/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/arrests"
urls <- c(
"https://cde.state.mn.us/DownloadData/ArrestsByJudicialDistrictDownloadData?ReportYear=2024",
"https://cde.state.mn.us/DownloadData/ArrestsByJudicialDistrictDownloadData?ReportYear=2023",
"https://cde.state.mn.us/DownloadData/ArrestsByJudicialDistrictDownloadData?ReportYear=2022",
"https://cde.state.mn.us/DownloadData/ArrestsByJudicialDistrictDownloadData?ReportYear=2021",
"https://cde.state.mn.us/DownloadData/ArrestsDrugByAgencyDownloadData?ReportYear=2021",
"https://cde.state.mn.us/DownloadData/ArrestsDrugByAgencyDownloadData?ReportYear=2022",
"https://cde.state.mn.us/DownloadData/ArrestsDrugByAgencyDownloadData?ReportYear=2023",
"https://cde.state.mn.us/DownloadData/ArrestsDrugByAgencyDownloadData?ReportYear=2024",
"https://cde.state.mn.us/DownloadData/ArrestsDrugByCountyDownloadData?ReportYear=2021",
"https://cde.state.mn.us/DownloadData/ArrestsDrugByCountyDownloadData?ReportYear=2022",
"https://cde.state.mn.us/DownloadData/ArrestsDrugByCountyDownloadData?ReportYear=2023",
"https://cde.state.mn.us/DownloadData/ArrestsDrugByCountyDownloadData?ReportYear=2024",
"https://cde.state.mn.us/DownloadData/ArrestsGroupAByAgeSexDownloadData?ReportYear=2021",
"https://cde.state.mn.us/DownloadData/ArrestsGroupAByAgeSexDownloadData?ReportYear=2022",
"https://cde.state.mn.us/DownloadData/ArrestsGroupAByAgeSexDownloadData?ReportYear=2023",
"https://cde.state.mn.us/DownloadData/ArrestsGroupAByAgeSexDownloadData?ReportYear=2024",
"https://cde.state.mn.us/DownloadData/ArrestsGroupAByAgeSexCountyDownloadData?ReportYear=2021",
"https://cde.state.mn.us/DownloadData/ArrestsGroupAByAgeSexCountyDownloadData?ReportYear=2022",
"https://cde.state.mn.us/DownloadData/ArrestsGroupAByAgeSexCountyDownloadData?ReportYear=2023",
"https://cde.state.mn.us/DownloadData/ArrestsGroupAByAgeSexCountyDownloadData?ReportYear=2024",
"https://cde.state.mn.us/DownloadData/ArrestsAdultJuvenileGroupAByAgeRaceDownloadData?ReportYear=2021",
"https://cde.state.mn.us/DownloadData/ArrestsAdultJuvenileGroupAByAgeRaceDownloadData?ReportYear=2022",
"https://cde.state.mn.us/DownloadData/ArrestsAdultJuvenileGroupAByAgeRaceDownloadData?ReportYear=2023",
"https://cde.state.mn.us/DownloadData/ArrestsAdultJuvenileGroupAByAgeRaceDownloadData?ReportYear=2024",
"https://cde.state.mn.us/DownloadData/ArrestsGroupBByAgeSexDownloadData?ReportYear=2021",
"https://cde.state.mn.us/DownloadData/ArrestsGroupBByAgeSexDownloadData?ReportYear=2022",
"https://cde.state.mn.us/DownloadData/ArrestsGroupBByAgeSexDownloadData?ReportYear=2023",
"https://cde.state.mn.us/DownloadData/ArrestsGroupBByAgeSexDownloadData?ReportYear=2024",
"https://cde.state.mn.us/DownloadData/ArrestsGroupBByAgeSexDownloadData?ReportYear=2025",
"https://cde.state.mn.us/DownloadData/ArrestsGroupBByAgeSexCountyDownloadData?ReportYear=2021",
"https://cde.state.mn.us/DownloadData/ArrestsGroupBByAgeSexCountyDownloadData?ReportYear=2022",
"https://cde.state.mn.us/DownloadData/ArrestsGroupBByAgeSexCountyDownloadData?ReportYear=2023",
"https://cde.state.mn.us/DownloadData/ArrestsGroupBByAgeSexCountyDownloadData?ReportYear=2024",
"https://cde.state.mn.us/DownloadData/ArrestsGroupBByAgeSexCountyDownloadData?ReportYear=2025",
"https://cde.state.mn.us/DownloadData/ArrestsAdultJuvenileGroupBByAgeRaceDownloadData?ReportYear=2021",
"https://cde.state.mn.us/DownloadData/ArrestsAdultJuvenileGroupBByAgeRaceDownloadData?ReportYear=2022",
"https://cde.state.mn.us/DownloadData/ArrestsAdultJuvenileGroupBByAgeRaceDownloadData?ReportYear=2023",
"https://cde.state.mn.us/DownloadData/ArrestsAdultJuvenileGroupBByAgeRaceDownloadData?ReportYear=2024",
"https://cde.state.mn.us/DownloadData/ArrestsAdultJuvenileGroupBByAgeRaceDownloadData?ReportYear=2025"
)
map(urls, function(url) {
file_name <- gsub("\\?|=", "_", basename(url))  # Replace '?' and '=' with '_'
file_name <- paste0(file_name, ".xlsx")  # Append '.xlsx' extension to the file name
full_path <- file.path(base_path, file_name)
GET(url, write_disk(full_path, overwrite = TRUE))  # Download and save the file
})
}
# download_arrest_reports()
# Define the function to download force-use files
download_force_reports <- function() {
base_path <- "/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/force"
urlscsv <- c(
"https://opendata.arcgis.com/api/v3/datasets/bd582e458df740de87601ea5e6136cdc_0/downloads/data?format=csv&spatialRefId=4326&where=1%3D1"
)
urljson <- c(
"https://opendata.arcgis.com/api/v3/datasets/bd582e458df740de87601ea5e6136cdc_0/downloads/data?format=geojson&spatialRefId=4326&where=1%3D1"
)
map(urlscsv, function(url) {
file_name <- paste0("mpd_shootings.csv")
full_path <- file.path(base_path, file_name)
GET(url, write_disk(full_path, overwrite = TRUE))  # Download and save the file
})
map(urljson, function(url) {
file_name <- paste0("mpd_shootings.geojson")
full_path <- file.path(base_path, file_name)
GET(url, write_disk(full_path, overwrite = TRUE))  # Download and save the file
})
}
download_force_reports()
# Define the function to download force-use files
download_shots_reports <- function() {
base_path <- "/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/gunfire"
urlscsv <- c(
"https://opendata.arcgis.com/api/v3/datasets/f9ae3bef2ccd4792b1835e2744de017f_0/downloads/data?format=csv&spatialRefId=4326&where=1%3D1"
)
map(urlscsv, function(url) {
file_name <- paste0("mpls_shots_fired.csv")
full_path <- file.path(base_path, file_name)
GET(url, write_disk(full_path, overwrite = TRUE))  # Download and save the file
})
}
download_shots_reports()
# Define the function to download force-use files
download_stops_reports <- function() {
base_path <- "/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/activity"
urlscsv <- c(
"https://opendata.arcgis.com/api/v3/datasets/215b4b543d894750aef86c725b56ee2a_0/downloads/data?format=csv&spatialRefId=4326&where=1%3D1"
)
map(urlscsv, function(url) {
file_name <- paste0("Police_Stop_Data.csv")
full_path <- file.path(base_path, file_name)
GET(url, write_disk(full_path, overwrite = TRUE))  # Download and save the file
})
# Assuming the CSV file is downloaded and named 'data.csv'
file_path <- '/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/activity/Police_Stop_Data.csv'
# Read the CSV file
data <- read_csv(file_path)
# Split the responseDate into Date and Timestamp
data <- data %>%
mutate(date = as.Date(responseDate, format = "%Y/%m/%d"),
Timestamp = format(strptime(responseDate, format = "%Y/%m/%d %H:%M:%S+00"), "%H:%M:%S"))
# Sort by Date
data <- data %>%
arrange(date)
# Pivot to get the number of records by Date
data_pivot <- data %>%
group_by(date) %>%
summarise(IncidentCount = n())
# Add a seven-day rolling average
data_pivot <- data_pivot %>%
mutate(Incidents = rollmean(IncidentCount, 7, fill = NA, align = 'right'))
# Write the pivoted data to a new CSV
write_csv(data_pivot, '/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/activity/mpd_stops.csv')
# Load the CSV file
pivoted_data <- read_csv('/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/activity/mpd_stops.csv')
# Ensure IncidentsCount is the correct type for rollmean
pivoted_data$IncidentCount <- as.numeric(pivoted_data$IncidentCount)
# Use rollmean to calculate the 7-day rolling average
pivoted_data <- pivoted_data %>%
mutate(Incidents = rollmean(IncidentCount, 7, fill = NA, align = 'right'))
# Write the updated data to a new CSV (optional)
write_csv(pivoted_data, '/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/activity/stops_average.csv')
# Convert the updated data frame to JSON
json_data <- toJSON(pivoted_data, pretty = TRUE)
# Write the JSON to a file
write(json_data, file = '/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/activity/stops_average.json')
}
download_stops_reports()
nibrs <- function() {
base_url <- "https://cde.state.mn.us/DownloadData/OffenseCountyMunicipalByAgencyDownloadData?ReportYear="
years <- 2021:2025
download_dir <- "/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/nibrs/"
combined_data <- data.frame()
for (year in years) {
file_url <- paste0(base_url, year)
file_name <- gsub("[?=]", "_", paste0("OffenseCountyMunicipalByAgencyDownloadData_", year, ".xlsx"))
file_path <- file.path(download_dir, file_name)
download.file(file_url, file_path, mode = "wb")
df <- read_excel(file_path)
df$year <- year
combined_data <- bind_rows(combined_data, df)
}
num_cols <- 7:58
combined_data[num_cols] <- lapply(combined_data[num_cols], as.numeric)
write_csv(combined_data, file.path(download_dir, "NIBRS.csv"))
}
nibrs()
suburbs <- function() {
input_file <- "/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/nibrs/NIBRS.csv"
df <- read_csv(input_file)
counties <- list(
Hennepin = "/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/subh/NIBRS_Hennepin.csv",
Anoka = "/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/suba/NIBRS_Anoka.csv",
Dakota = "/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/subd/NIBRS_Dakota.csv",
Ramsey = "/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/subr/NIBRS_Ramsey.csv",
Carver = "/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/subc/NIBRS_Carver.csv",
Scott = "/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/subs/NIBRS_Scott.csv",
Washington = "/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/subw/NIBRS_Washington.csv"
)
for (county in names(counties)) {
county_data <- df %>% filter(County == county)
write_csv(county_data, counties[[county]])
}
}
suburbs()
filter_actual <- function(file_paths) {
for (file in file_paths) {
# Read the CSV file
df <- read_csv(file, show_col_types = FALSE)
# Filter for Statistic == "Actual"
df_filtered <- df %>% filter(Statistic == "Actual")
# Construct new filename by inserting "_actual" before ".csv"
new_file <- sub("(\\.csv)$", "_actual.csv", file)
# Write the filtered data back
write_csv(df_filtered, new_file)
message("Processed: ", new_file)
}
}
# List of file paths
file_paths <- c(
"/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/suba/NIBRS_Anoka.csv",
"/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/subc/NIBRS_Carver.csv",
"/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/subd/NIBRS_Dakota.csv",
"/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/subh/NIBRS_Hennepin.csv",
"/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/subr/NIBRS_Ramsey.csv",
"/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/subs/NIBRS_Scott.csv",
"/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/subw/NIBRS_Washington.csv"
)
filter_actual(file_paths)
stpaul <- function() {
input_file <- "/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/nibrs/NIBRS.csv"
output_file <- "/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/stpn/NIBRS_StPaul.csv"
df <- read_csv(input_file) %>% filter(`Agency Name` == "St Paul Police Dept")
write_csv(df, output_file)
}
stpaul()
file_paths <- c(
"/Users/hargaja/Desktop/workspace/redboard/20240428-crimedash/store/stpn/NIBRS_StPaul.csv"
)
filter_actual(file_paths)
get_crime_data <- function(city_name, ori, output_folder, api_key) {
# Normalize city name to lowercase and underscored for file naming
file_city <- str_to_lower(str_replace_all(city_name, "\\s+", "_"))
# Define offenses
violent_crimes <- c("homicide", "rape", "robbery", "aggravated-assault")
property_crimes <- c("burglary", "larceny", "arson", "motor-vehicle-theft")
all_crimes <- c(violent_crimes, property_crimes)
# Year range
year_start <- 1985
year_end <- 2023
# Query function
get_offense_data <- function(offense) {
url <- sprintf(
"https://api.usa.gov/crime/fbi/cde/offense/by-agency/%s/%s/count?from=%d&to=%d&API_KEY=%s",
ori, offense, year_start, year_end, "4gOAVzldpoBuKhfX08nJ478jUzhLKpF8aUBbduhQ"
)
res <- GET(url)
stop_for_status(res)
content(res, as = "parsed", simplifyVector = TRUE)$data %>%
as_tibble() %>%
transmute(
year = as.integer(data_year),
offense = offense,
count = as.integer(actual)
)
}
# Pull data
crime_data_long <- map_df(all_crimes, get_offense_data)
# Pivot to wide format
crime_data_wide <- crime_data_long %>%
pivot_wider(names_from = offense, values_from = count)
# Ensure output folder exists
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
# Write CSV
output_path <- file.path(output_folder, sprintf("%s_crime_1985_2023.csv", file_city))
write.csv(crime_data_wide, output_path, row.names = FALSE)
message("✅ Data saved to: ", output_path)
return(crime_data_wide)
}
get_crime_data(
city_name = "Minneapolis",
ori = "MN0271100",
output_folder = "~/Desktop/crime_data"
)
get_crime_data <- function(city_name, ori, output_folder, api_key) {
# Normalize city name to lowercase and underscored for file naming
file_city <- str_to_lower(str_replace_all(city_name, "\\s+", "_"))
# Define offenses
violent_crimes <- c("homicide", "rape", "robbery", "aggravated-assault")
property_crimes <- c("burglary", "larceny", "arson", "motor-vehicle-theft")
all_crimes <- c(violent_crimes, property_crimes)
# Year range
year_start <- 1985
year_end <- 2023
# Query function
get_offense_data <- function(offense) {
url <- sprintf(
"https://api.usa.gov/crime/fbi/cde/offense/by-agency/%s/%s/count?from=%d&to=%d",
ori, offense, year_start, year_end
)
res <- GET(url, add_headers("X-API-Key" = "4gOAVzldpoBuKhfX08nJ478jUzhLKpF8aUBbduhQ"))
stop_for_status(res)
content(res, as = "parsed", simplifyVector = TRUE)$data %>%
as_tibble() %>%
transmute(
year = as.integer(data_year),
offense = offense,
count = as.integer(actual)
)
}
# Pull data
crime_data_long <- map_df(all_crimes, get_offense_data)
# Pivot to wide format
crime_data_wide <- crime_data_long %>%
pivot_wider(names_from = offense, values_from = count)
# Ensure output folder exists
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
# Write CSV
output_path <- file.path(output_folder, sprintf("%s_crime_1985_2023.csv", file_city))
write.csv(crime_data_wide, output_path, row.names = FALSE)
message("✅ Data saved to: ", output_path)
return(crime_data_wide)
}
get_crime_data(
city_name = "Minneapolis",
ori = "MN0271100",
output_folder = "~/Desktop/crime_data"
)
library(httr)
library(jsonlite)
api_key <- "YOUR_REAL_API_KEY"
url <- "https://api.usa.gov/crime/fbi/cde/offense/by-agency/MN0271100/robbery/count?from=2010&to=2020"
res <- GET(url, add_headers("X-API-Key" = api_key))
print(status_code(res))
print(content(res, as = "text"))
library(httr)
library(jsonlite)
api_key <- "YOUR_REAL_API_KEY"
url <- "https://api.usa.gov/crime/fbi/cde/offense/by-agency/MN0271100/robbery/count?from=2010&to=2020"
res <- GET(url, add_headers("X-API-Key" = "4gOAVzldpoBuKhfX08nJ478jUzhLKpF8aUBbduhQ"))
print(status_code(res))
print(content(res, as = "text"))
library(httr)
library(jsonlite)
api_key <- "YOUR_REAL_API_KEY"
url <- "https://api.usa.gov/crime/fbi/cde/offense/by-agency/MN0271100/robbery/count?from=2010&to=2020"
res <- GET(url, add_headers("X-API-Key" = "4gOAVzldpoBuKhfX08nJ478jUzhLKpF8aUBbduhQ"))
print(status_code(res))
print(content(res, as = "text"))
library(httr)
library(jsonlite)
api_key <- "4gOAVzldpoBuKhfX08nJ478jUzhLKpF8aUBbduhQ"
res <- GET(
url = "https://api.usa.gov/crime/fbi/cde/offense/by-agency/MN0271100/robbery/count?from=2010&to=2020",
add_headers("X-API-Key" = api_key)
)
print(status_code(res))
print(content(res, as = "text"))
